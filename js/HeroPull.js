import { EventEmitter } from './core.js';
import { HeroesGrid } from './heroesGrid.js';
let parentSelector = '#heropull';
const pullListCN = 'hero-pull-list';
const _pullList = `<div class="${pullListCN}"></div>`;
const pullItemCN = 'hero-pull-list__item';
const _pullItem = `<div class="${pullItemCN}"></div>`;
const disabledGridCN = 'heroes-grid_disabled';
const disabledHeroInGridCN = 'heroes-grid__col_disabled';
class HeroPullModel extends EventEmitter {
    constructor(players) {
        super();
        this.heroesGrid = new HeroesGrid({ parent: parentSelector });
        this.pull = [];
        this.step = 0;
        this.players = players;
    }
    get currPlayer() {
        return this.players[this.step];
    }
    get pullEnded() {
        return this.step > this.players.length - 1;
    }
    addPull(hero) {
        this.pull.push(hero);
    }
}
class HeroPullView extends EventEmitter {
    constructor(model) {
        super();
        this.elem = {
            $wrap: $(parentSelector),
            $list: $(_pullList)
        };
        this._model = model;
        model.heroesGrid.on('click', opt => {
            if (!$(opt.event.currentTarget).hasClass(disabledHeroInGridCN))
                this.emit('pullHero', opt.hero.id);
        });
    }
    disableHeroInGrid(id) {
        const $grid = this._model.heroesGrid.$gridElem;
        const $target = $grid.find(`[data-id="${id}"]`);
        $target.addClass(disabledHeroInGridCN);
    }
    addHeroInPullList(id) {
        const $grid = this._model.heroesGrid.$gridElem;
        const $clone = $grid.find(`[data-id="${id}"]`).children().clone();
        const $li = this.elem.$list.children();
        const step = this._model.step;
        $li.eq(step).append($clone);
    }
    disableGrid(cond) {
        const $grid = this._model.heroesGrid.$gridElem;
        if (cond)
            $grid.addClass(disabledGridCN);
        else
            $grid.removeClass(disabledGridCN);
    }
    render() {
        const $list = this.elem.$list;
        this.elem.$wrap.prepend($list);
        this._model.players.forEach(name => $list.append($(_pullItem)));
        this.emit('pullStart');
    }
}
class HeroPullController {
    constructor(model, view) {
        this.pull = function () { };
        this.pullEnd = function () { };
        this._model = model;
        this._view = view;
        view.on('pullHero', (id) => this.pullHero(id));
    }
    pullHero(id) {
        const view = this._view;
        const model = this._model;
        const hero = model.heroesGrid.getHero(id);
        view.disableHeroInGrid(id);
        view.addHeroInPullList(id);
        model.step++;
        model.addPull(hero);
        if (model.pullEnded) {
            view.disableGrid(model.pullEnded);
            this.pullEnd();
        }
        else {
            this.pull();
        }
    }
}
export class HeroPull {
    constructor(players) {
        this.model = new HeroPullModel(players);
        this.view = new HeroPullView(this.model);
        this.controller = new HeroPullController(this.model, this.view);
        this.view.render();
    }
    on(event, callback) {
        this.controller[event] = callback;
        return this;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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ZSI6Imhlcm9QdWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi9jb3JlLmpzJztcclxuaW1wb3J0IHsgSGVyb2VzR3JpZCB9IGZyb20gJy4vaGVyb2VzR3JpZC5qcyc7XHJcbmltcG9ydCB7IEhlcm8gfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmxldCBwYXJlbnRTZWxlY3RvciA9ICcjaGVyb3B1bGwnO1xyXG5cclxuY29uc3QgcHVsbExpc3RDTiA9ICdoZXJvLXB1bGwtbGlzdCc7XHJcbmNvbnN0IF9wdWxsTGlzdCA9IGA8ZGl2IGNsYXNzPVwiJHtwdWxsTGlzdENOfVwiPjwvZGl2PmA7XHJcblxyXG5jb25zdCBwdWxsSXRlbUNOID0gJ2hlcm8tcHVsbC1saXN0X19pdGVtJztcclxuY29uc3QgX3B1bGxJdGVtID0gYDxkaXYgY2xhc3M9XCIke3B1bGxJdGVtQ059XCI+PC9kaXY+YDtcclxuXHJcbmNvbnN0IGRpc2FibGVkR3JpZENOID0gJ2hlcm9lcy1ncmlkX2Rpc2FibGVkJztcclxuY29uc3QgZGlzYWJsZWRIZXJvSW5HcmlkQ04gPSAnaGVyb2VzLWdyaWRfX2NvbF9kaXNhYmxlZCc7XHJcblxyXG5jbGFzcyBIZXJvUHVsbE1vZGVsIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIGhlcm9lc0dyaWQgPSBuZXcgSGVyb2VzR3JpZCh7cGFyZW50OiBwYXJlbnRTZWxlY3Rvcn0pO1xyXG4gICAgcHVsbDogSGVyb1tdID0gW107XHJcbiAgICBwbGF5ZXJzOiBzdHJpbmdbXTtcclxuICAgIHN0ZXAgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsYXllcnM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbGF5ZXJzID0gcGxheWVycztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3VyclBsYXllcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsYXllcnNbdGhpcy5zdGVwXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHVsbEVuZGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXAgPiB0aGlzLnBsYXllcnMubGVuZ3RoIC0gMTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRQdWxsKGhlcm86IEhlcm8pIHtcclxuICAgICAgICB0aGlzLnB1bGwucHVzaChoZXJvKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgSGVyb1B1bGxWaWV3IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIF9tb2RlbDogSGVyb1B1bGxNb2RlbDtcclxuXHJcbiAgICBlbGVtID0ge1xyXG4gICAgICAgICR3cmFwOiAkKHBhcmVudFNlbGVjdG9yKSxcclxuICAgICAgICAkbGlzdDogJChfcHVsbExpc3QpXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBIZXJvUHVsbE1vZGVsKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcclxuXHJcbiAgICAgICAgbW9kZWwuaGVyb2VzR3JpZC5vbignY2xpY2snLCBvcHQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoICEkKG9wdC5ldmVudC5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcyhkaXNhYmxlZEhlcm9JbkdyaWRDTikgKSB0aGlzLmVtaXQoJ3B1bGxIZXJvJywgb3B0Lmhlcm8uaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVIZXJvSW5HcmlkKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCAkZ3JpZCA9IHRoaXMuX21vZGVsLmhlcm9lc0dyaWQuJGdyaWRFbGVtO1xyXG4gICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkZ3JpZC5maW5kKGBbZGF0YS1pZD1cIiR7aWR9XCJdYCk7XHJcblxyXG4gICAgICAgICR0YXJnZXQuYWRkQ2xhc3MoZGlzYWJsZWRIZXJvSW5HcmlkQ04pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEhlcm9JblB1bGxMaXN0KGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCAkZ3JpZCA9IHRoaXMuX21vZGVsLmhlcm9lc0dyaWQuJGdyaWRFbGVtO1xyXG4gICAgICAgIGNvbnN0ICRjbG9uZSA9ICRncmlkLmZpbmQoYFtkYXRhLWlkPVwiJHtpZH1cIl1gKS5jaGlsZHJlbigpLmNsb25lKCk7XHJcbiAgICAgICAgY29uc3QgJGxpID0gdGhpcy5lbGVtLiRsaXN0LmNoaWxkcmVuKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0ZXAgPSB0aGlzLl9tb2RlbC5zdGVwO1xyXG5cclxuICAgICAgICAkbGkuZXEoc3RlcCkuYXBwZW5kKCRjbG9uZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzYWJsZUdyaWQoY29uZDogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0ICRncmlkID0gdGhpcy5fbW9kZWwuaGVyb2VzR3JpZC4kZ3JpZEVsZW07XHJcblxyXG4gICAgICAgIGlmIChjb25kKSAkZ3JpZC5hZGRDbGFzcyhkaXNhYmxlZEdyaWRDTik7XHJcbiAgICAgICAgZWxzZSAkZ3JpZC5yZW1vdmVDbGFzcyhkaXNhYmxlZEdyaWRDTik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0ICRsaXN0ID0gdGhpcy5lbGVtLiRsaXN0O1xyXG4gICAgICAgIHRoaXMuZWxlbS4kd3JhcC5wcmVwZW5kKCRsaXN0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fbW9kZWwucGxheWVycy5mb3JFYWNoKG5hbWUgPT4gJGxpc3QuYXBwZW5kKCQoX3B1bGxJdGVtKSkpO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQoJ3B1bGxTdGFydCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBIZXJvUHVsbENvbnRyb2xsZXIge1xyXG4gICAgX21vZGVsOiBIZXJvUHVsbE1vZGVsO1xyXG4gICAgX3ZpZXc6IEhlcm9QdWxsVmlldztcclxuXHJcbiAgICBwdWxsID0gZnVuY3Rpb24oKSB7fTtcclxuICAgIHB1bGxFbmQgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBIZXJvUHVsbE1vZGVsLCB2aWV3OiBIZXJvUHVsbFZpZXcpIHtcclxuICAgICAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xyXG4gICAgICAgIHRoaXMuX3ZpZXcgPSB2aWV3O1xyXG5cclxuICAgICAgICB2aWV3Lm9uKCdwdWxsSGVybycsIChpZDogc3RyaW5nKSA9PiB0aGlzLnB1bGxIZXJvKGlkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVsbEhlcm8oaWQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLl92aWV3O1xyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fbW9kZWw7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlcm8gPSBtb2RlbC5oZXJvZXNHcmlkLmdldEhlcm8oaWQpO1xyXG5cclxuICAgICAgICB2aWV3LmRpc2FibGVIZXJvSW5HcmlkKGlkKTtcclxuICAgICAgICB2aWV3LmFkZEhlcm9JblB1bGxMaXN0KGlkKTtcclxuXHJcbiAgICAgICAgbW9kZWwuc3RlcCsrO1xyXG4gICAgICAgIG1vZGVsLmFkZFB1bGwoaGVybyk7XHJcblxyXG4gICAgICAgIGlmIChtb2RlbC5wdWxsRW5kZWQpIHtcclxuICAgICAgICAgICAgdmlldy5kaXNhYmxlR3JpZChtb2RlbC5wdWxsRW5kZWQpO1xyXG4gICAgICAgICAgICB0aGlzLnB1bGxFbmQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnB1bGwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIZXJvUHVsbCB7IFxyXG4gICAgbW9kZWw6IEhlcm9QdWxsTW9kZWw7XHJcbiAgICB2aWV3OiBIZXJvUHVsbFZpZXc7XHJcbiAgICBjb250cm9sbGVyIDogSGVyb1B1bGxDb250cm9sbGVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsYXllcnM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbCAgICAgID0gbmV3IEhlcm9QdWxsTW9kZWwocGxheWVycyk7XHJcbiAgICAgICAgdGhpcy52aWV3ICAgICAgID0gbmV3IEhlcm9QdWxsVmlldyh0aGlzLm1vZGVsKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgSGVyb1B1bGxDb250cm9sbGVyKHRoaXMubW9kZWwsIHRoaXMudmlldyk7XHJcblxyXG4gICAgICAgIHRoaXMudmlldy5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJbZXZlbnRdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn0iXX0=
