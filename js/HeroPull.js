import { EventEmitter } from './core.js';
import { HeroesGrid } from './heroesGrid.js';
let parentSelector = '#heropull';
// const pullListCN = 'hero-pull-list';
// const _pullList = `<div class="${pullListCN}"></div>`;
// const pullItemCN = 'hero-pull-list__item';
// const _pullItem = `<div class="${pullItemCN}"></div>`;
const disabledGridCN = 'heroes-grid_disabled';
const disabledHeroInGridCN = 'heroes-grid__col_disabled';
class HeroPullModel extends EventEmitter {
    constructor(players) {
        super();
        this.heroesGrid = new HeroesGrid({ parent: parentSelector });
        this.pull = [];
        this.step = 0;
        this.players = players;
    }
    get currPlayer() {
        return this.players[this.step];
    }
    get pullEnded() {
        return this.step > this.players.length - 1;
    }
    addPull(hero) {
        this.pull.push(hero);
    }
}
class HeroPullView extends EventEmitter {
    constructor(model) {
        super();
        this.elem = {
            $wrap: $(parentSelector),
        };
        this._model = model;
        model.heroesGrid.on('click', opt => {
            if (!$(opt.event.currentTarget).hasClass(disabledHeroInGridCN))
                this.emit('pullHero', opt.hero.id);
        });
    }
    disableHeroInGrid(id) {
        const $grid = this._model.heroesGrid.$gridElem;
        const $target = $grid.find(`[data-id="${id}"]`);
        $target.addClass(disabledHeroInGridCN);
    }
    // addHeroInPullList(id: string) {
    //     const $grid = this._model.heroesGrid.$gridElem;
    //     const $clone = $grid.find(`[data-id="${id}"]`).children().clone();
    //     const $li = this.elem.$list.children();
    //     const step = this._model.step;
    //     $li.eq(step).append($clone);
    // }
    disableGrid(cond) {
        const $grid = this._model.heroesGrid.$gridElem;
        if (cond)
            $grid.addClass(disabledGridCN);
        else
            $grid.removeClass(disabledGridCN);
    }
    render() {
        // const $list = this.elem.$list;
        // this.elem.$wrap.prepend($list);
        // this._model.players.forEach(name => $list.append($(_pullItem)));
    }
}
class HeroPullController {
    constructor(model, view) {
        this.pull = function (currPlayer) { };
        this.pullEnd = function (pull) { };
        this.click = function (hero) { };
        this._model = model;
        this._view = view;
        view.on('pullHero', (id) => this.pullHero(id));
    }
    pullHero(id) {
        const view = this._view;
        const model = this._model;
        const hero = model.heroesGrid.getHero(id);
        view.disableHeroInGrid(id);
        // view.addHeroInPullList(id);
        this.click(hero);
        model.step++;
        model.addPull(hero);
        if (model.pullEnded) {
            view.disableGrid(model.pullEnded);
            model.heroesGrid.view.setTarget(null);
            this.pullEnd(this._model.pull);
        }
        else {
            this.pull(model.currPlayer);
        }
    }
}
export class HeroPull {
    constructor(players) {
        this.model = new HeroPullModel(players);
        this.view = new HeroPullView(this.model);
        this.controller = new HeroPullController(this.model, this.view);
        this.view.render();
    }
    on(event, callback) {
        this.controller[event] = callback;
        return this;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
